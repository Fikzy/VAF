plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.9'
    id 'org.beryx.runtime' version '1.12.5'
}

apply plugin: 'java'
compileJava.options.encoding = 'UTF-8'

repositories {
    mavenCentral()
}

dependencies {

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'

    implementation group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '4.0.0-beta-3'

    implementation 'io.github.bonigarcia:webdrivermanager:4.4.3'

    implementation 'io.reactivex.rxjava3:rxjava:3.0.13-RC4'

    javafx {
        version = '16'
        modules = ['javafx.controls']
    }

    implementation 'org.controlsfx:controlsfx:11.1.0'

    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.14.1'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.14.1'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.14.1'
}

test {
    useJUnitPlatform()
}

application {
    mainClass.set('vaf.Main')
    applicationName = 'VAS'
}

runtime {
    addOptions '--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages'

    // Uncomment and adjust the code below if you want to generate images for multiple platforms.
// (You need to also uncomment the line 'targetPlatformName = ...' in the jpackage block.)

//    targetPlatform("lin") {
//        jdkHome = jdkDownload("https://github.com/AdoptOpenJDK/openjdk16-binaries/releases/download/jdk16u-2021-05-08-12-45/OpenJDK16U-jdk_x64_linux_hotspot_2021-05-08-12-45.tar.gz")
//    }
//    targetPlatform("mac") {
//        jdkHome = jdkDownload("https://github.com/AdoptOpenJDK/openjdk16-binaries/releases/download/jdk16u-2021-05-08-12-45/OpenJDK16U-jdk_x64_mac_hotspot_2021-05-08-12-45.tar.gz") {
//            downloadDir = "$buildDir/myMac"
//            archiveName = "my-mac-jdk"
//            archiveExtension = "tar.gz"
//            pathToHome = "jdk-16.0.1+9/Contents/Home"
//            overwrite = true
//        }
//    }
    targetPlatform("win") {
        jdkHome = jdkDownload("https://github.com/AdoptOpenJDK/openjdk16-binaries/releases/download/jdk16u-2021-05-08-12-45/OpenJDK16U-jdk_x64_windows_hotspot_2021-05-08-12-45.zip")
    }


    launcher {
        jvmArgs.add('-Djdk.tls.client.protocols=TLSv1.1,TLSv1.2')
        jvmArgs.add('-Dhttps.protocols=TLSv1.1,TLSv1.2')

        setNoConsole(false)
    }
    jpackage {
        // Uncomment and adjust the following line if your runtime task is configured to generate images for multiple platforms
//        targetPlatformName = "mac"

        def currentOs = org.gradle.internal.os.OperatingSystem.current()
        def imgType = currentOs.windows ? 'ico' : currentOs.macOsX ? 'icns' : 'png'
        imageOptions += ['--icon', "src/main/resources/vaf/icon.$imgType"]
        installerOptions += ['--resource-dir', "src/main/resources"]
        installerOptions += ['--vendor', 'Yeetus Corp']

        if (currentOs.windows) {
            installerOptions += ['--win-per-user-install', '--win-dir-chooser', '--win-menu', '--win-shortcut']
        } else if (currentOs.linux) {
            installerOptions += ['--linux-package-name', 'VAF', '--linux-shortcut']
        } else if (currentOs.macOsX) {
            installerOptions += ['--mac-package-name', 'VAF']
        }
    }
}
